/* global React CCM_TOOLS_PATH */

// Flux
import { translateTag as t } from 'janeswalk/stores/I18nStore';

export default class ImageUpload extends React.Component {
  constructor(props) {
    super(props);
    Object.assign(this, {
      removeImage: (i) => {
        const thumbnails = this.props.valueLink.value;
        thumbnails.splice(i, 1);
        this.props.valueLink.requestChange(thumbnails);
      },

      handleUpload: (e) => {
        const body = new FormData();

        if (e.currentTarget.files) {
          // TODO: Update to support uploading multiple files at once
          // TODO: display a spinner w/ the local file as the BG until
          // TODO: Move to flux
          // Load one file
          body.append('Filedata', e.currentTarget.files[0]);

          // Form validation token, generated by concrete5
          body.append('ccm_token', this.props.valt);

          fetch(`${CCM_TOOLS_PATH}/files/importers/quick`, {
            method: 'POST',
            credentials: 'include',
            body,
          })
          .then(res => res.json())
          .then(data => {
              const thumbnails = this.props.valueLink.value;
              thumbnails.push(data);
              this.props.valueLink.requestChange(thumbnails);
          })
          .catch(({ message }) => console.err(`Error uploading image: ${message}`));
        }
      },
    });
  }

  render() {
    const thumbnails = this.props.valueLink.value;
    // TODO: include an upload callback that loads the uploaded image locally,
    // instead of the one off the server
    // TODO: Implement server-side support for multiple thumbnails, then
    // remove limit here
    return (
      <form className="upload-image">
        <label htmlFor="walkphotos" id="photo-tip">{ t`Upload a photo that best represents your walk. Use the 'Preview Walk' button on the left to see how it will look on your walk page. If you have trouble uploading, reduce the size of your photo before trying again.` }</label>
        {thumbnails.map((thumb, i) => {
          // Grab just the name, so local files being uploaded have the same key as the hosted URL
          const filename = `${thumb.url || ''}i`.replace(/^.*[\\\/]/, '');
          const handleRemove = () => this.removeImage(i);

          return (
            <div
              key={filename}
              className="thumbnail"
              style={{ backgroundImage: `url(${thumb.url})` }}
            >
              <a className="remove" onClick={handleRemove}>
                <i className="fa fa-times-circle" />
              </a>
            </div>
            );
        })}
        {(thumbnails.length < 1) ?
        <div className="thumbnail fileupload">
          <input className="ccm-al-upload-single-file" type="file" onChange={this.handleUpload} />
          <i className="fa fa-camera-retro fa-5x" />
          <span className="fileupload-new">{ t`Click to upload an image` }</span>
        </div> : undefined}
      </form>
    );
  }
}
